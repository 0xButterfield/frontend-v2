{
  "address": "0xb75aCbdAb41164FcE7d6e9ca7E0C04EFcc6BB6ED",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "initialBPT",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint128[]",
          "name": "amounts",
          "type": "uint128[]"
        },
        {
          "internalType": "uint128",
          "name": "amp",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "swapFee",
          "type": "uint128"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x00de6aefeba0d55f098e053bcdd7f743a7779b320d982453580460ed36bd9fa7",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "3411209",
    "logsBloom": "0x
    "blockHash": "0x19e253fb56ea0a37e00bfdf507c558a578b23f52f44164f7ed2a904c25c7fedc",
    "transactionHash": "0x00de6aefeba0d55f098e053bcdd7f743a7779b320d982453580460ed36bd9fa7",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "3411209",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFa8677072C5066bA66406E3c567bb0503C31df64"
  ],
  "solcInputHash": "65f2583abd05236df79b3ad357daf4f2",
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialBPT\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"amounts\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128\",\"name\":\"amp\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"swapFee\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pools/stablecoin/StablecoinPoolFactory.sol\":\"StablecoinPoolFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(uint256(_data));\\n    }\\n}\\n\",\"keccak256\":\"0x539295edd21ad514c0b1a0d1c89ada0831942f379ea83b6eb85769211fc7937e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x938f2783ceb543ad266344cc5c420e1294026507081d6b7c2ec01b3303056265\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x79004a1d1471abe87e92c4497acba06d5dfa5b1f3e9894a0991a7c4669c5c02c\",\"license\":\"MIT\"},\"contracts/math/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\n\\n/* solhint-disable private-vars-leading-underscore */\\n\\nlibrary FixedPoint {\\n    uint128 internal constant ONE = 10**18; // 18 decimal places\\n\\n    uint256 internal constant MIN_POW_BASE = 1 wei;\\n    uint256 internal constant MAX_POW_BASE = (2 * ONE) - 1 wei;\\n    uint256 internal constant POW_PRECISION = ONE / 10**10;\\n\\n    function btoi(uint256 a) internal pure returns (uint256) {\\n        return a / ONE;\\n    }\\n\\n    function floor(uint256 a) internal pure returns (uint256) {\\n        return btoi(a) * ONE;\\n    }\\n\\n    function abs(int256 a) internal pure returns (uint256) {\\n        if (a > 0) {\\n            return uint256(a);\\n        } else {\\n            // TODO: check valid\\n            return uint256(-a);\\n        }\\n    }\\n\\n    function abs128(int128 a) internal pure returns (uint128) {\\n        if (a > 0) {\\n            return uint128(a);\\n        } else {\\n            // TODO: check valid\\n            return uint128(-a);\\n        }\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function add128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        uint128 c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (uint256 c, bool flag) = subSign(a, b);\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    function subSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\\n        if (a >= b) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    function sub128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        (uint128 c, bool flag) = subSign128(a, b);\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    function subSign128(uint128 a, uint128 b) internal pure returns (uint128, bool) {\\n        if (a >= b) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c0 = a * b;\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c1 = c0 + (ONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c2 = c1 / ONE;\\n        return c2;\\n    }\\n\\n    function mul128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        uint128 c0 = a * b;\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint128 c1 = c0 + (ONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint128 c2 = c1 / ONE;\\n        return c2;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\n        uint256 c0 = a * ONE;\\n        require(a == 0 || c0 / a == ONE, \\\"ERR_DIV_INTERNAL\\\"); // mul overflow\\n        uint256 c1 = c0 + (b / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  add require\\n        uint256 c2 = c1 / b;\\n        return c2;\\n    }\\n\\n    function div128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\n        uint128 c0 = a * ONE;\\n        require(a == 0 || c0 / a == ONE, \\\"ERR_DIV_INTERNAL\\\"); // mul overflow\\n        uint128 c1 = c0 + (b / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  add require\\n        uint128 c2 = c1 / b;\\n        return c2;\\n    }\\n\\n    // DSMath.wpow\\n    function powi(uint256 a, uint256 n) internal pure returns (uint256) {\\n        uint256 z = n % 2 != 0 ? a : ONE;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            a = mul(a, a);\\n\\n            if (n % 2 != 0) {\\n                z = mul(z, a);\\n            }\\n        }\\n        return z;\\n    }\\n\\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\n    // Use `powi` for `b^e` and `powK` for k iterations\\n    // of approximation of b^0.w\\n    function pow(uint256 base, uint256 exp) internal pure returns (uint256) {\\n        require(base >= MIN_POW_BASE, \\\"ERR_POW_BASE_TOO_LOW\\\");\\n        require(base <= MAX_POW_BASE, \\\"ERR_POW_BASE_TOO_HIGH\\\");\\n\\n        uint256 whole = floor(exp);\\n        uint256 remain = sub(exp, whole);\\n\\n        uint256 wholePow = powi(base, btoi(whole));\\n\\n        if (remain == 0) {\\n            return wholePow;\\n        }\\n\\n        uint256 partialResult = powApprox(base, remain, POW_PRECISION);\\n        return mul(wholePow, partialResult);\\n    }\\n\\n    function powApprox(\\n        uint256 base,\\n        uint256 exp,\\n        uint256 precision\\n    ) internal pure returns (uint256) {\\n        // term 0:\\n        uint256 a = exp;\\n        (uint256 x, bool xneg) = subSign(base, ONE);\\n        uint256 term = ONE;\\n        uint256 sum = term;\\n        bool negative = false;\\n\\n        // term(k) = numer / denom\\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\\n        // continue until term is less than precision\\n        for (uint256 i = 1; term >= precision; i++) {\\n            uint256 bigK = i * ONE;\\n            (uint256 c, bool cneg) = subSign(a, sub(bigK, ONE));\\n            term = mul(term, mul(c, x));\\n            term = div(term, bigK);\\n            if (term == 0) break;\\n\\n            if (xneg) negative = !negative;\\n            if (cneg) negative = !negative;\\n            if (negative) {\\n                sum = sub(sum, term);\\n            } else {\\n                sum = add(sum, term);\\n            }\\n        }\\n\\n        return sum;\\n    }\\n}\\n\",\"keccak256\":\"0xc28c991f829d87ad248480877a65411db805fb33db08817c5a60eb6fd348448c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/BToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n// Highly opinionated token implementation\\n// * It includes functions to increase and decrease allowance as a workaround\\n//   for the well-known issue with 'approve':\\n//   https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n// * It allows for 'infinite allowance', where an allowance of 0xff..ff is not\\n//   decreased by calls to transferFrom\\n// * It lets a token holder use 'transferFrom' to send their own tokens,\\n//   without first setting allowance\\n// * It emits 'Approval' events whenever allowance is changed by 'transferFrom'\\nabstract contract BTokenBase is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) internal _balance;\\n    mapping(address => mapping(address => uint256)) internal _allowance;\\n    uint256 internal _totalSupply;\\n\\n    function _mint(uint256 amt) internal {\\n        _balance[address(this)] = _balance[address(this)].add(amt);\\n        _totalSupply = _totalSupply.add(amt);\\n\\n        emit Transfer(address(0), address(this), amt);\\n    }\\n\\n    function _burn(uint256 amt) internal {\\n        _balance[address(this)] = _balance[address(this)].sub(amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _totalSupply = _totalSupply.sub(amt);\\n\\n        emit Transfer(address(this), address(0), amt);\\n    }\\n\\n    function _move(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) internal {\\n        _balance[src] = _balance[src].sub(amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _balance[dst] = _balance[dst].add(amt);\\n\\n        emit Transfer(src, dst, amt);\\n    }\\n\\n    function _push(address to, uint256 amt) internal {\\n        _move(address(this), to, amt);\\n    }\\n\\n    function _pull(address from, uint256 amt) internal {\\n        _move(from, address(this), amt);\\n    }\\n}\\n\\ncontract BToken is BTokenBase {\\n    using SafeMath for uint256;\\n\\n    string private _name = \\\"Balancer Pool Token\\\";\\n    string private _symbol = \\\"BPT\\\";\\n    uint8 private _decimals = 18;\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function allowance(address src, address dst) external view override returns (uint256) {\\n        return _allowance[src][dst];\\n    }\\n\\n    function balanceOf(address whom) external view override returns (uint256) {\\n        return _balance[whom];\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function approve(address dst, uint256 amt) external override returns (bool) {\\n        _allowance[msg.sender][dst] = amt;\\n\\n        emit Approval(msg.sender, dst, amt);\\n\\n        return true;\\n    }\\n\\n    function increaseApproval(address dst, uint256 amt) external returns (bool) {\\n        _allowance[msg.sender][dst] = _allowance[msg.sender][dst].add(amt);\\n\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n\\n        return true;\\n    }\\n\\n    function decreaseApproval(address dst, uint256 amt) external returns (bool) {\\n        uint256 oldValue = _allowance[msg.sender][dst];\\n\\n        if (amt > oldValue) {\\n            _allowance[msg.sender][dst] = 0;\\n        } else {\\n            _allowance[msg.sender][dst] = oldValue.sub(amt);\\n        }\\n\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n\\n        return true;\\n    }\\n\\n    function transfer(address dst, uint256 amt) external override returns (bool) {\\n        _move(msg.sender, dst, amt);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external override returns (bool) {\\n        require(msg.sender == src || amt <= _allowance[src][msg.sender], \\\"ERR_BTOKEN_BAD_CALLER\\\");\\n\\n        _move(src, dst, amt);\\n\\n        if (msg.sender != src && _allowance[src][msg.sender] != uint256(-1)) {\\n            _allowance[src][msg.sender] = _allowance[src][msg.sender].sub(amt);\\n            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x8f2644f32e0127cbbd83aebdd197392b1939eb40a25f67b4bc389789971f072e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/BasePoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../vault/IVault.sol\\\";\\n\\nabstract contract BasePoolFactory {\\n    using Address for address;\\n\\n    IVault public immutable vault;\\n\\n    event PoolCreated(address indexed pool);\\n\\n    constructor(IVault _vault) {\\n        vault = _vault;\\n    }\\n\\n    /**\\n     * @dev Deploys a pool contract defined by `creationCode`. The `salt` value is only used in determining the\\n     * resulting pool address. Any value can be passed, but reusing `salt` for a given `creationCode` results in\\n     * a revert.\\n     *\\n     * Before the constructor of the created contract is executed, the factory will register it in the Vault as a\\n     * Trusted Operator. This means the contract will be able to pull funds from both User Balance and tokens that have\\n     * been granted allowance. As is always the case when dealing with Trusted Operators, the contract should be careful\\n     * to authenticate any addresses they use this way.\\n     *\\n     * The creation code for a Solidity contract can be constructed by concatenating the `creationCode` property of the\\n     * contract type with the ABI-encoded constructor arguments. Note that the compiler doesn't perform any type\\n     * checking here: all factory-created contracts should be subject to at least basic testing.\\n     *\\n     * Sample usage using abi.encodePacked to concatenate the `bytes` arrays:\\n     *   _create(abi.encodePacked(type(ERC20).creationCode, abi.encode(\\\"My Token\\\", \\\"TKN\\\", 18)), salt);\\n     *\\n     * Emits a `PoolCreated` event.\\n     *\\n     * Returns the address of the created contract.\\n     */\\n    function _create(bytes memory creationCode, bytes32 salt) internal returns (address) {\\n        // TODO: consider internally choosing a salt value (e.g. an incrementing counter hash with the blockchash) to\\n        // disallow vanity pool addresses (which might cause phishing issues). This might not make sense because other\\n        // arguments could still be changed sligthly to act as a nonce.\\n\\n        address expectedPool = Create2.computeAddress(salt, keccak256(creationCode));\\n        require(!expectedPool.isContract(), \\\"Salt cannot be reused\\\");\\n\\n        vault.reportTrustedOperator(expectedPool);\\n\\n        address pool = Create2.deploy(0, salt, creationCode);\\n        assert(pool == expectedPool);\\n\\n        emit PoolCreated(pool);\\n\\n        return pool;\\n    }\\n}\\n\",\"keccak256\":\"0xaa47828aa4e0b256a9ede4a4c4109018d326294e58750fefb71d8cffe1175b71\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/IBPTPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\n\\nimport \\\"../vault/IVault.sol\\\";\\n\\ninterface IBPTPool {\\n    function getVault() external view returns (IVault);\\n\\n    function getPoolId() external view returns (bytes32);\\n\\n    // Joining a pool\\n    // poolAmountOut - how much bpt the user expects to get\\n    // maxAmountsIn - the max amounts of each token the user is willing to add to the vault\\n    // The set of tokens is not specified because it is read from the Vault - and remains immutable that way.\\n    function joinPool(\\n        uint256 poolAmountOut,\\n        uint128[] calldata maxAmountsIn,\\n        bool transferTokens,\\n        address beneficiary\\n    ) external;\\n\\n    function exitPool(\\n        uint256 poolAmountIn,\\n        uint256[] calldata minAmountsOut,\\n        bool withdrawTokens,\\n        address beneficiary\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa983fa718bf4d717feff7b28b5441f99e56df5e971c1eab57cd679f84e6a46bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/stablecoin/StablecoinMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"../../math/FixedPoint.sol\\\";\\n\\n// This is a contract to emulate file-level functions. Convert to a library\\n// after the migration to solc v0.7.1.\\n\\n// solhint-disable private-vars-leading-underscore\\n// solhint-disable var-name-mixedcase\\n\\ncontract StablecoinMath {\\n    int256 internal constant PRECISION = 100000000000000;\\n\\n    struct Data {\\n        int256 amp;\\n        int256 invariant;\\n        int256 n;\\n        int256 nn;\\n        int256 sum;\\n        int256 prod;\\n    }\\n\\n    function _approximateAmount(Data memory data, uint128 approxAmount) private pure returns (uint128) {\\n        uint128 newApproxAmount;\\n        int256 c1 = data.amp * data.sum + ((FixedPoint.ONE / data.nn) - data.amp) * data.invariant;\\n        int256 c2 = (data.invariant * data.invariant * data.invariant) / (data.nn * data.nn * data.prod);\\n        for (int256 i = 0; i < 255; i++) {\\n            int256 f1 = data.amp * approxAmount * approxAmount + c1 * approxAmount - c2 * FixedPoint.ONE;\\n            int256 f2 = c1 + 2 * data.amp * approxAmount;\\n            newApproxAmount = uint128(approxAmount - (f1 / f2));\\n            if (newApproxAmount > approxAmount) {\\n                if ((newApproxAmount - approxAmount) <= PRECISION) {\\n                    break;\\n                }\\n            } else if ((newApproxAmount - approxAmount) <= PRECISION) {\\n                break;\\n            }\\n            approxAmount = newApproxAmount;\\n        }\\n        return newApproxAmount;\\n    }\\n\\n    function _getDataOutGivenIn(\\n        uint128 amp,\\n        uint128[] memory balances,\\n        uint256 tokenIndexIn,\\n        uint256 tokenIndexOut,\\n        uint128 tokenAmountIn\\n    ) private pure returns (Data memory) {\\n        int256 invariant = _invariant(amp, balances);\\n        int256 sum = 0;\\n        int256 prod = FixedPoint.ONE;\\n        uint256 n = balances.length;\\n        int256 nn = 1;\\n        for (uint256 i = 0; i < n; i++) {\\n            if (i != tokenIndexOut) {\\n                if (i == tokenIndexIn) {\\n                    sum = sum + balances[i] + tokenAmountIn;\\n                    prod = (prod * (balances[i] + tokenAmountIn)) / FixedPoint.ONE;\\n                } else {\\n                    sum = sum + balances[i];\\n                    prod = (prod * balances[i]) / FixedPoint.ONE;\\n                }\\n            }\\n            nn = nn * int256(n);\\n        }\\n        return Data({ amp: int256(amp), invariant: invariant, sum: sum, n: int256(n), nn: nn, prod: prod });\\n    }\\n\\n    function _getDataInGivenOut(\\n        uint128 amp,\\n        uint128[] memory balances,\\n        uint256 tokenIndexIn,\\n        uint256 tokenIndexOut,\\n        uint128 tokenAmountOut\\n    ) private pure returns (Data memory) {\\n        int256 invariant = _invariant(amp, balances);\\n        int256 sum = 0;\\n        int256 prod = FixedPoint.ONE;\\n        uint256 n = balances.length;\\n        int256 nn = 1;\\n        for (uint256 i = 0; i < n; i++) {\\n            if (i != tokenIndexIn) {\\n                if (i == tokenIndexOut) {\\n                    sum = sum + balances[i] - tokenAmountOut;\\n                    prod = (prod * (balances[i] - tokenAmountOut)) / FixedPoint.ONE;\\n                } else {\\n                    sum = sum + balances[i];\\n                    prod = (prod * balances[i]) / FixedPoint.ONE;\\n                }\\n            }\\n            nn = nn * int256(n);\\n        }\\n        return Data({ amp: int256(amp), invariant: invariant, sum: sum, n: int256(n), nn: nn, prod: prod });\\n    }\\n\\n    function _outGivenIn(\\n        uint128 amp,\\n        uint128[] memory balances,\\n        uint256 tokenIndexIn,\\n        uint256 tokenIndexOut,\\n        uint128 tokenAmountIn\\n    ) internal pure returns (uint128) {\\n        Data memory data = _getDataOutGivenIn(amp, balances, tokenIndexIn, tokenIndexOut, tokenAmountIn);\\n        uint128 approxTokenAmountOut = balances[tokenIndexOut] - tokenAmountIn;\\n        return balances[tokenIndexOut] - _approximateAmount(data, approxTokenAmountOut);\\n    }\\n\\n    function _inGivenOut(\\n        uint128 amp,\\n        uint128[] memory balances,\\n        uint256 tokenIndexIn,\\n        uint256 tokenIndexOut,\\n        uint128 tokenAmountOut\\n    ) internal pure returns (uint128) {\\n        Data memory data = _getDataInGivenOut(amp, balances, tokenIndexIn, tokenIndexOut, tokenAmountOut);\\n        uint128 approxTokenAmountIn = balances[tokenIndexIn] + tokenAmountOut;\\n        return _approximateAmount(data, approxTokenAmountIn) - balances[tokenIndexIn];\\n    }\\n\\n    function _invariant(uint128 amp, uint128[] memory balances) internal pure returns (int256) {\\n        int256 _amp = int256(amp);\\n        int256 sum = 0;\\n        int256 prod = FixedPoint.ONE;\\n        uint256 n = balances.length;\\n        int256 nn = 1;\\n        for (uint256 i = 0; i < n; i++) {\\n            sum = sum + balances[i];\\n            prod = (prod * balances[i]) / FixedPoint.ONE;\\n            nn = nn * int256(n);\\n        }\\n        int256 invariant = sum;\\n        int256 newInvariant;\\n        int256 c2 = _amp - FixedPoint.ONE / nn;\\n        int256 c1 = (nn * nn * prod);\\n        for (int256 i = 0; i < 255; i++) {\\n            int256 f1 = (c2 * invariant + (((invariant * invariant) / c1) * invariant) - _amp * sum) / FixedPoint.ONE;\\n            int256 f2 = (c2 * FixedPoint.ONE + 3 * ((invariant * FixedPoint.ONE) / c1) * invariant) / FixedPoint.ONE;\\n            newInvariant =\\n                invariant -\\n                (2 * f1 * f2 * FixedPoint.ONE) /\\n                (2 * f2 * f2 + f1 * 6 * ((invariant * FixedPoint.ONE) / c1));\\n            if (newInvariant > invariant) {\\n                if ((newInvariant - invariant) <= PRECISION) {\\n                    return newInvariant;\\n                }\\n            } else if ((invariant - newInvariant) <= PRECISION) {\\n                return newInvariant;\\n            }\\n            invariant = newInvariant;\\n        }\\n        return newInvariant;\\n    }\\n}\\n\",\"keccak256\":\"0xf0258b3ec1847bc431fdb352330b0d0c5cbde6dfebdb80fcd0804fb748243b89\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/stablecoin/StablecoinPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../BToken.sol\\\";\\nimport \\\"../IBPTPool.sol\\\";\\n\\nimport \\\"../../vault/IVault.sol\\\";\\nimport \\\"../../vault/interfaces/ITupleTradingStrategy.sol\\\";\\nimport \\\"../../math/FixedPoint.sol\\\";\\n\\nimport \\\"./StablecoinMath.sol\\\";\\n\\ncontract StablecoinPool is ITupleTradingStrategy, IBPTPool, StablecoinMath, BToken, ReentrancyGuard {\\n    using FixedPoint for uint128;\\n    using FixedPoint for uint256;\\n    using SafeCast for uint256;\\n\\n    IVault private immutable _vault;\\n    bytes32 private immutable _poolId;\\n\\n    uint128 private immutable _amp;\\n    uint128 private immutable _swapFee;\\n\\n    uint128 private constant _MIN_SWAP_FEE = 0;\\n    uint128 private constant _MAX_SWAP_FEE = 10 * (10**16); // 10%\\n\\n    constructor(\\n        IVault vault,\\n        uint256 initialBPT,\\n        IERC20[] memory tokens,\\n        uint128[] memory amounts,\\n        address from,\\n        uint128 amp,\\n        uint128 swapFee\\n    ) {\\n        require(tokens.length >= 2, \\\"ERR_MIN_TOKENS\\\");\\n\\n        bytes32 poolId = vault.newPool(address(this), IVault.StrategyType.TUPLE);\\n\\n        vault.addLiquidity(poolId, from, tokens, amounts, false);\\n\\n        require(vault.getPoolTokens(poolId).length == tokens.length, \\\"ERR_REPEATED_TOKENS\\\");\\n\\n        _mintPoolShare(initialBPT);\\n        _pushPoolShare(from, initialBPT);\\n\\n        // Set immutable state variables - these cannot be read from during construction\\n        _vault = vault;\\n        _poolId = poolId;\\n\\n        require(swapFee >= _MIN_SWAP_FEE, \\\"ERR__MIN_SWAP_FEE\\\");\\n        require(swapFee <= _MAX_SWAP_FEE, \\\"ERR_MAX_MAX_FEE\\\");\\n        _swapFee = swapFee;\\n\\n        _amp = amp;\\n    }\\n\\n    //Getters\\n\\n    function getVault() external view override returns (IVault) {\\n        return _vault;\\n    }\\n\\n    function getPoolId() external view override returns (bytes32) {\\n        return _poolId;\\n    }\\n\\n    function getAmplification() external view returns (uint128) {\\n        return _amp;\\n    }\\n\\n    function getSwapFee() external view returns (uint128) {\\n        return _swapFee;\\n    }\\n\\n    //Quote Swaps\\n\\n    function quoteOutGivenIn(\\n        QuoteRequestGivenIn calldata request,\\n        uint128[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) external view override returns (uint128) {\\n        uint128 adjustedIn = _subtractSwapFee(request.amountIn);\\n        uint128 maximumAmountOut = _outGivenIn(_amp, balances, indexIn, indexOut, adjustedIn);\\n        return maximumAmountOut;\\n    }\\n\\n    function quoteInGivenOut(\\n        QuoteRequestGivenOut calldata request,\\n        uint128[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) external view override returns (uint128) {\\n        uint128 minimumAmountIn = _inGivenOut(_amp, balances, indexIn, indexOut, request.amountOut);\\n        return _addSwapFee(minimumAmountIn);\\n    }\\n\\n    //Protocol Fees\\n\\n    function _getAccSwapFees(uint128[] memory balances) internal pure returns (uint128[] memory) {\\n        uint128[] memory swapFeesCollected = new uint128[](balances.length);\\n        //TODO: calculate swap fee and pick random token\\n        return swapFeesCollected;\\n    }\\n\\n    function _resetAccSwapFees(uint128[] memory balances) internal {\\n        //TODO: reset swap fees\\n    }\\n\\n    // Pays protocol swap fees\\n    function payProtocolFees() external {\\n        //Load tokens\\n        IERC20[] memory tokens = _vault.getPoolTokens(_poolId);\\n        //Load balances\\n        uint128[] memory balances = _vault.getPoolTokenBalances(_poolId, tokens);\\n        uint128[] memory swapFeesCollected = _getAccSwapFees(balances);\\n\\n        balances = _vault.paySwapProtocolFees(_poolId, tokens, swapFeesCollected);\\n        _resetAccSwapFees(balances);\\n    }\\n\\n    //Join / Exit\\n\\n    function joinPool(\\n        uint256 poolAmountOut,\\n        uint128[] calldata maxAmountsIn,\\n        bool transferTokens,\\n        address beneficiary\\n    ) external override nonReentrant {\\n        IERC20[] memory tokens = _vault.getPoolTokens(_poolId);\\n        uint128[] memory balances = _vault.getPoolTokenBalances(_poolId, tokens);\\n\\n        //Pay protocol fees to have balances up to date\\n        uint128[] memory swapFeesCollected = _getAccSwapFees(balances);\\n        balances = _vault.paySwapProtocolFees(_poolId, tokens, swapFeesCollected);\\n\\n        uint256 poolTotal = totalSupply();\\n        uint128 ratio = poolAmountOut.div(poolTotal).toUint128();\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"Tokens and amounts length mismatch\\\");\\n\\n        uint128[] memory amountsIn = new uint128[](tokens.length);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            amountsIn[i] = balances[i].mul128(ratio);\\n            require(amountsIn[i] <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n        }\\n\\n        _vault.addLiquidity(_poolId, msg.sender, tokens, amountsIn, !transferTokens);\\n\\n        //Reset swap fees counter\\n        _resetAccSwapFees(balances);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(beneficiary, poolAmountOut);\\n    }\\n\\n    function exitPool(\\n        uint256 poolAmountIn,\\n        uint256[] calldata minAmountsOut,\\n        bool withdrawTokens,\\n        address beneficiary\\n    ) external override nonReentrant {\\n        IERC20[] memory tokens = _vault.getPoolTokens(_poolId);\\n        uint128[] memory balances = _vault.getPoolTokenBalances(_poolId, tokens);\\n\\n        //Pay protocol fees to have balances up to date\\n        uint128[] memory swapFeesCollected = _getAccSwapFees(balances);\\n        balances = _vault.paySwapProtocolFees(_poolId, tokens, swapFeesCollected);\\n\\n        uint256 poolTotal = totalSupply();\\n        uint128 ratio = poolAmountIn.div(poolTotal).toUint128();\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        require(minAmountsOut.length == tokens.length, \\\"Tokens and amounts length mismatch\\\");\\n\\n        uint128[] memory amountsOut = new uint128[](tokens.length);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            amountsOut[i] = balances[i].mul128(ratio);\\n            require(amountsOut[i] >= minAmountsOut[i], \\\"NOT EXITING ENOUGH\\\");\\n        }\\n\\n        _vault.removeLiquidity(_poolId, beneficiary, tokens, amountsOut, !withdrawTokens);\\n\\n        //Reset swap fees counter\\n        _resetAccSwapFees(balances);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(poolAmountIn);\\n    }\\n\\n    // potential helpers\\n    function _addSwapFee(uint128 amount) internal view returns (uint128) {\\n        return amount.div128(FixedPoint.ONE.sub128(_swapFee));\\n    }\\n\\n    function _subtractSwapFee(uint128 amount) internal view returns (uint128) {\\n        uint128 fees = amount.mul128(_swapFee);\\n        return amount.sub128(fees);\\n    }\\n\\n    // Move to BalancerPoolToken (BToken)\\n\\n    function _pullPoolShare(address from, uint256 amount) internal {\\n        _pull(from, amount);\\n    }\\n\\n    function _pushPoolShare(address to, uint256 amount) internal {\\n        _push(to, amount);\\n    }\\n\\n    function _mintPoolShare(uint256 amount) internal {\\n        _mint(amount);\\n    }\\n\\n    function _burnPoolShare(uint256 amount) internal {\\n        _burn(amount);\\n    }\\n}\\n\",\"keccak256\":\"0xa62add5d14aea10d4ee28d2d29379ab0c651f85e23a5c9590eca51bac9727922\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/stablecoin/StablecoinPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../vault/IVault.sol\\\";\\n\\nimport \\\"../BasePoolFactory.sol\\\";\\n\\nimport \\\"./StablecoinPool.sol\\\";\\n\\ncontract StablecoinPoolFactory is BasePoolFactory {\\n    constructor(IVault _vault) BasePoolFactory(_vault) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    function create(\\n        uint256 initialBPT,\\n        IERC20[] memory tokens,\\n        uint128[] memory amounts,\\n        uint128 amp,\\n        uint128 swapFee,\\n        bytes32 salt\\n    ) external returns (address) {\\n        return\\n            _create(\\n                abi.encodePacked(\\n                    type(StablecoinPool).creationCode,\\n                    // Make the sender the `from` address\\n                    abi.encode(vault, initialBPT, tokens, amounts, msg.sender, amp, swapFee)\\n                ),\\n                salt\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xfa7f6dbfc1f4e6dfc881953055e21e8646781f4344fb336448330ce142d90a20\",\"license\":\"GPL-3.0-or-later\"},\"contracts/validators/ISwapValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma experimental ABIEncoderV2;\\n\\npragma solidity ^0.7.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\n\\nimport \\\"../math/FixedPoint.sol\\\";\\n\\nimport \\\"../vault/IVault.sol\\\";\\n\\ninterface ISwapValidator {\\n    function validate(\\n        IVault.SwapKind kind,\\n        IERC20[] calldata tokens,\\n        int256[] calldata vaultDeltas,\\n        //address caller, //TODO: is it useful to validate?\\n        //address from, //TODO: is it useful to validate?\\n        //address to, //TODO: is it useful to validate?\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3eeb58a12299fdcf1af1f30b576c87729ccf3c9c72e068e18e7d7c2a0d5f9fb6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IFlashLoanReceiver.sol\\\";\\nimport \\\"../validators/ISwapValidator.sol\\\";\\n\\npragma solidity ^0.7.1;\\n\\n// Full external interface for the Vault core contract - no external or public methods exist in the contract that don't\\n// override one of these declarations.\\ninterface IVault {\\n    // User Balance\\n\\n    /**\\n     * @dev Returns `user`'s User Balance for a specific token.\\n     */\\n    function getUserTokenBalance(address user, IERC20 token) external view returns (uint128);\\n\\n    /**\\n     * @dev Deposits tokens from the caller into `user`'s User Balance.\\n     */\\n    function deposit(\\n        IERC20 token,\\n        uint128 amount,\\n        address user\\n    ) external;\\n\\n    /**\\n     * @dev Withdraws tokens from the caller's User Balance, transferring them to `recipient`. Withdraw protocol fees\\n     * are charged by this.\\n     */\\n    function withdraw(\\n        IERC20 token,\\n        uint128 amount,\\n        address recipient\\n    ) external;\\n\\n    // Operators\\n\\n    /**\\n     * @dev Authorizes `operator` to act as an operator for the caller.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revokes `operator` so that it no longer is an operator for the caller. An account is always its own operator\\n     * and cannot revoke itself. Trusted Operators also cannot be revoked.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns true of `operator` is an operator for `user`.\\n     */\\n    function isOperatorFor(address user, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the number of operators for `user`. This does not include `user` itself, nor Trusted Operators.\\n     */\\n    function getUserTotalOperators(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a partial list of `user`'s operators, starting at index `start`, up to index `end`. This does not\\n     * include `user` itself, nor Trusted Operators.\\n     *\\n     * The ordering of this list may change as operators are authorized and revoked.\\n     */\\n    function getUserOperators(\\n        address user,\\n        uint256 start,\\n        uint256 end\\n    ) external view returns (address[] memory);\\n\\n    // Trusted operators\\n\\n    /**\\n     @dev Returns the number of Trusted Operators.\\n     */\\n    function getTotalTrustedOperators() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a partial list of Trusted Operators, starting at index `start`, up to index `end`.\\n     */\\n    function getTrustedOperators(uint256 start, uint256 end) external view returns (address[] memory);\\n\\n    /**\\n     * @dev Returns the number of Trusted Operator Reporters.\\n     */\\n    function getTotalTrustedOperatorReporters() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a partial list of Trusted Operator Reporters, starting at index `start`, up to index `end`.\\n     */\\n    function getTrustedOperatorReporters(uint256 start, uint256 end) external view returns (address[] memory);\\n\\n    /**\\n     * @dev Adds `operator` as a Trusted Operator. Can only be called by a Trusted Operator Reporter.\\n     */\\n    function reportTrustedOperator(address operator) external;\\n\\n    /**\\n     * @dev Removes `operator` as a Trusted Operator. Can only be called by a Trusted Operator Reporter.\\n     */\\n    function revokeTrustedOperator(address operator) external;\\n\\n    // Pools\\n\\n    // There are two variants of Trading Strategies for Pools: Pair Trading Strategies, and Tuple Trading Strategies.\\n    // These require different data from the Vault, which is reflected in their differing interfaces\\n    // (IPairTradingStrategy and ITupleTradingStrategy, respectively).\\n    enum StrategyType { PAIR, TUPLE }\\n\\n    /**\\n     * @dev Creates a new Pool with a Trading Strategy and Trading Strategy Type. The caller of this function becomes\\n     * the Pool's controller.\\n     *\\n     * Returns the created Pool's ID. Also emits a PoolCreated event.\\n     */\\n    function newPool(address strategy, StrategyType strategyType) external returns (bytes32);\\n\\n    /**\\n     * @dev Emitted when a Pool is created by calling `newPool`. Contains the Pool ID of the created pool.\\n     */\\n    event PoolCreated(bytes32 poolId);\\n\\n    // Pool Queries\\n\\n    /**\\n     * @dev Returns the number of Pools.\\n     */\\n    function getTotalPools() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a partial list of Pool IDs, starting at index `start`, up to index `end`.\\n     */\\n    function getPoolIds(uint256 start, uint256 end) external view returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Returns a Pool's address.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, StrategyType);\\n\\n    /**\\n     * @dev Returns all tokens in the Pool (tokens for which the Pool has balance).\\n     */\\n    function getPoolTokens(bytes32 poolId) external view returns (IERC20[] memory);\\n\\n    /**\\n     * @dev Returns the Pool's balance of `tokens`. This might be zero if the tokens are not in the Pool.\\n     */\\n    function getPoolTokenBalances(bytes32 poolId, IERC20[] calldata tokens) external view returns (uint128[] memory);\\n\\n    // Pool Management\\n\\n    /**\\n     * @dev Adds liquidity into a Pool. Can only be called by its controller.\\n     *\\n     * For each token, the Pool's balance will be increased by `totalAmounts[i]`. This is achieved by first transferring\\n     * `amountsToTransfer[i]` tokens, and then withdrawing any amount remaining from User Balance. In both cases, the\\n     * tokens will come from `from`. `from` must have granted allowance to the Vault, and the caller (Pool controller)\\n     * must be an operator for `from`.\\n     *\\n     * If a token that was not previously in the Pool is granted balance by this function, it will become part of the\\n     * Pool. This is the only way tokens can be added to a Pool.\\n     */\\n    function addLiquidity(\\n        bytes32 poolId,\\n        address from,\\n        IERC20[] calldata tokens,\\n        uint128[] calldata amounts,\\n        bool withdrawFromUserBalance\\n    ) external;\\n\\n    /**\\n     * @dev Removes liquidity from a Pool. Can only be called by its controller.\\n     *\\n     * For each token, the Pool's balance will be decreased by `totalAmounts[i]`. This is achieved by first transferring\\n     * `amountsToTransfer[i]` tokens, and then depositing any amount remaining into User Balance. In both cases, the\\n     * tokens are sent to `to`. Withdraw protocol fees are charged over any tokens transferred out.\\n     *\\n     * If a token that was previously in the Pool has all of its balance removed by this function, it will no longer be\\n     * in the Pool. This is the only way tokens can be removed from a Pool.\\n     */\\n    function removeLiquidity(\\n        bytes32 poolId,\\n        address to,\\n        IERC20[] calldata tokens,\\n        uint128[] calldata amounts,\\n        bool depositToUserBalance\\n    ) external;\\n\\n    // Trading interface\\n\\n    // Despite the external API having two separate functions for given in and given out, internally their are handled\\n    // together to avoid unnecessary code duplication. This enum indicates which kind of swap we're processing.\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. Each swap is validated and executed in order.\\n     * However, tokens are only transferred in and out of the Vault (or withdrawn/deposited from User Balance) after all\\n     * swaps have been validated and the net token balance change computed. This means it is possible to e.g. under\\n     * certain conditions perform arbitrage by swapping with multiple Pools in a way that results in net token movement\\n     * out of the Vault (profit), with no tokens being sent in.\\n     *\\n     * The `diffs` array contains the addresses of all tokens involved in the swaps, along with how many tokens the\\n     * caller expects to transfer into the Vault for each. Any tokens due to the Vault not included in this amount will\\n     * be withdrawn from User Balance.\\n     *\\n     * The `swaps` array contains the information about each individual swaps. All swaps consist of a Pool receiving\\n     * some amount of one of its tokens (`tokenIn`), and sending some amount of another one of its tokens (`tokenOut`).\\n     * A swap cannot cause `tokenOut` to be fully drained. The Pools' Trading Strategies will validate each swap,\\n     * possibly charging a swap fee on the amount going in. If so, the protocol will then charge the protocol swap fee\\n     * to the Pool's own swap fee.\\n     *\\n     * Funds will be received according to the data in `fundsIn`, and sent according to `fundsOut`.\\n     */\\n    function batchSwapGivenIn(\\n        ISwapValidator validator,\\n        bytes calldata validatorData,\\n        SwapIn[] calldata swaps,\\n        IERC20[] memory tokens,\\n        FundManagement calldata funds\\n    ) external;\\n\\n    function batchSwapGivenOut(\\n        ISwapValidator validator,\\n        bytes calldata validatorData,\\n        SwapOut[] calldata swaps,\\n        IERC20[] memory tokens,\\n        FundManagement calldata funds\\n    ) external;\\n\\n    // batchSwap helper data structures\\n\\n    // A batched swap is made up of a number of Swaps. Each swap indicates a token balance increasing (tokenIn) and one\\n    // decreasing (tokenOut) in a pool.\\n    // Indexes instead of token addresses to not perform lookup in the tokens array.\\n    struct SwapIn {\\n        bytes32 poolId;\\n        uint128 tokenInIndex;\\n        uint128 tokenOutIndex;\\n        uint128 amountIn;\\n        bytes userData;\\n    }\\n\\n    struct SwapOut {\\n        bytes32 poolId;\\n        uint128 tokenInIndex;\\n        uint128 tokenOutIndex;\\n        uint128 amountOut;\\n        bytes userData;\\n    }\\n\\n    // Funds in are received by `IERC20.transferFrom` from `withdrawFrom`. If received funds are not enough, they are\\n    // withdrawn from withdrawFrom's User Balance.\\n    // In any case, the caller must be an operator for withdrawFrom.\\n    // Funds out are deposited to recipient's User Balance, or transferred out if transferToRecipient is true.\\n    struct FundManagement {\\n        address sender;\\n        address recipient;\\n        bool withdrawFromUserBalance;\\n        bool depositToUserBalance;\\n    }\\n\\n    // Pay Swap Protocol Fee interface\\n    /**\\n     * @dev Receives an array of tokens and their corresponding amounts to which swap protocol fees will be applied.\\n     * If amounts are greater than zero, it uses them to calculate the corresponding swap protocol fee for the token\\n     * which is collected by substracting it from the token pool balance.\\n     */\\n    function paySwapProtocolFees(\\n        bytes32 poolId,\\n        IERC20[] calldata tokens,\\n        uint128[] calldata collectedFees\\n    ) external returns (uint128[] memory balances);\\n\\n    // Flash Loan interface\\n\\n    /**\\n     * @dev Performs a flash loan where 'amount' tokens of 'token' are sent to 'receiver', which must implement the\\n     * IFlashLoanReceiver interface. An arbitrary user-provided 'receiverData' is forwarded to this contract.\\n     *\\n     * Before returning from the IFlashLoanReceiver.receiveFlashLoan call, the receiver must transfer back the loaned\\n     * tokens, plus a proportional protocol fee.\\n     *\\n     * This is a non-reentrant call: swaps, adding liquidity, etc., are all disabled until the flash loan finishes.\\n     */\\n    function flashLoan(\\n        IFlashLoanReceiver receiver,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata receiverData\\n    ) external;\\n\\n    // Investment interface\\n\\n    /**\\n     * @dev Authorize an investment manager for a pool token\\n     */\\n    function authorizePoolInvestmentManager(\\n        bytes32 poolId,\\n        IERC20 token,\\n        address manager\\n    ) external;\\n\\n    /**\\n     * @dev Revoke the current investment manager of a pool token\\n     */\\n    function revokePoolInvestmentManager(bytes32 poolId, IERC20 token) external;\\n\\n    /**\\n     * @dev Increase the invested amount of a given pool token\\n     */\\n    function investPoolBalance(\\n        bytes32 poolId,\\n        IERC20 token,\\n        uint128 amount\\n    ) external;\\n\\n    /**\\n     * @dev Decrease the invested amount of a given pool token\\n     */\\n    function divestPoolBalance(\\n        bytes32 poolId,\\n        IERC20 token,\\n        uint128 amount\\n    ) external;\\n\\n    /**\\n     * @dev Update invested amount of a given pool token\\n     */\\n    function updateInvested(\\n        bytes32 poolId,\\n        IERC20 token,\\n        uint128 amountInvested\\n    ) external;\\n\\n    //Protocol Fees\\n\\n    /**\\n     * @dev Returns the amount in protocol fees collected for a specific `token`.\\n     */\\n    function getCollectedFeesByToken(IERC20 token) external view returns (uint256);\\n\\n    // Admin Controls\\n\\n    /**\\n     * @dev Authorizes `reporter` to call `reportTrustedOperator`. This is typically called on factory contracts. Can\\n     * only be called by the admin.\\n     */\\n    function authorizeTrustedOperatorReporter(address reporter) external;\\n\\n    /**\\n     * @dev Remove authorization for `reporter` to call `reportTrustedOperator`. This is typically called on factory\\n     * contracts. Can only be called by the admin.\\n     */\\n    function revokeTrustedOperatorReporter(address reporter) external;\\n\\n    /**\\n     * @dev Transfers to protocolFeeCollector address the requested amounts of protocol fees. Anyone can call it.\\n     */\\n    function withdrawProtocolFees(IERC20[] calldata tokens, uint256[] calldata amounts) external;\\n\\n    // Missing here: setting protocol fees, changing admin\\n}\\n\",\"keccak256\":\"0x2abffa84c86bb7420cf9c9e743d2d7c4c86b1356a84a0060a54feaed2f05706b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IFlashLoanReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IFlashLoanReceiver {\\n    function receiveFlashLoan(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata feeAmounts,\\n        bytes calldata receiverData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbe46da7c5fff72bad25d0c79e603273a8ad965399aa561ce928556034d7257c6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/ITradingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITradingStrategy {\\n    // TODO: outdated docs, fix\\n    // This data structure represents a two tokens swap and is used by strategies for trade validation.\\n    // `from` is the origin address where the entering funds are coming from\\n    // `to` is the destination address where exiting funds are going to.\\n    // `tokenIn` and 'tokenOut' are the token increasing in funds and the token decreasing respectively.\\n    // `amountIn` and `amountOut` are the amount increased by `tokenIn`\\n    // and the amount decreased by `tokenOut`respectively.\\n    // `userData` is any extra data that the swap caller wants to send to the strategy to validate the swap.\\n    struct QuoteRequestGivenIn {\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint128 amountIn;\\n        // Misc data\\n        bytes32 poolId;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n\\n    struct QuoteRequestGivenOut {\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint128 amountOut;\\n        // Misc data\\n        bytes32 poolId;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n}\\n\",\"keccak256\":\"0x9cbc082dc506bfbb4e3662c95db764742b5592af4831486983c4cf08b4c1bff5\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/ITupleTradingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ITradingStrategy.sol\\\";\\n\\ninterface ITupleTradingStrategy is ITradingStrategy {\\n    function quoteOutGivenIn(\\n        QuoteRequestGivenIn calldata request,\\n        uint128[] calldata balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) external returns (uint128 amountOut);\\n\\n    function quoteInGivenOut(\\n        QuoteRequestGivenOut calldata request,\\n        uint128[] calldata balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) external returns (uint128 amountIn);\\n}\\n\",\"keccak256\":\"0x614c639d529ab019a394aa65f93c2aa15204c560f779ec62932d796d115f1f42\",\"license\":\"GPL-3.0-or-later\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.8.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logByte(byte p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(byte)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xd3f9eb69241af8de5174a6cfa3da3cbc94e351dee495002d8675b665865ba417\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051613d75380380613d7583398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c613cdd6100986000398060ac528061012452806101b25250613cdd6000f3fe60806040523480156200001157600080fd5b50600436106200003a5760003560e01c8063bd33d224146200003f578063fbfa77cf146200006e575b600080fd5b62000056620000503660046200044b565b62000078565b6040516200006591906200063b565b60405180910390f35b6200005662000122565b60006200011760405180602001620000909062000398565b601f1982820381018352601f909101166040819052620000e1907f0000000000000000000000000000000000000000000000000000000000000000908b908b908b9033908c908c906020016200064f565b60408051601f198184030181529082905262000101929160200162000622565b6040516020818303038152906040528362000146565b979650505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806200015c83858051906020012062000289565b905062000172816001600160a01b03166200029f565b156200019b5760405162461bcd60e51b8152600401620001929062000767565b60405180910390fd5b60405163eb1192c360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063eb1192c390620001e99084906004016200063b565b600060405180830381600087803b1580156200020457600080fd5b505af115801562000219573d6000803e3d6000fd5b5050505060006200022d60008587620002dc565b9050816001600160a01b0316816001600160a01b0316146200024b57fe5b6040516001600160a01b038216907f83a48fbcfc991335314e74d0496aab6a1987e992ddc85dddbcc4d6dd6ef2e9fc90600090a29150505b92915050565b60006200029883833062000357565b9392505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590620002d457508115155b949350505050565b60008084471015620003025760405162461bcd60e51b8152600401620001929062000796565b8251620003235760405162461bcd60e51b81526004016200019290620006ff565b8383516020850187f590506001600160a01b038116620002d45760405162461bcd60e51b8152600401620001929062000734565b60008060ff60f81b838686604051602001620003779493929190620005ee565b60408051808303601f19018152919052805160209091012095945050505050565b61346e806200083a83390190565b600082601f830112620003b7578081fd5b8135620003ce620003c882620007f4565b620007cd565b818152915060208083019084810181840286018201871015620003f057600080fd5b6000805b85811015620004275782356001600160801b038116811462000414578283fd5b85529383019391830191600101620003f4565b50505050505092915050565b80356001600160801b03811681146200028357600080fd5b60008060008060008060c0878903121562000464578182fd5b863595506020808801356001600160401b038082111562000483578485fd5b818a0191508a601f83011262000497578485fd5b8135620004a8620003c882620007f4565b81815284810190848601868402860187018f1015620004c5578889fd5b8895505b83861015620004f4578035620004df8162000820565b835260019590950194918601918601620004c9565b509950505060408a01359250808311156200050d578485fd5b50506200051d89828a01620003a6565b9450506200052f886060890162000433565b925062000540886080890162000433565b915060a087013590509295509295509295565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156200059a5781516001600160801b03168752958201959082019060010162000573565b509495945050505050565b60008151815b81811015620005c75760208185018101518683015201620005ab565b81811115620005d65782828601525b509290920192915050565b6001600160801b03169052565b6001600160f81b031994909416845260609290921b6001600160601b03191660018401526015830152603582015260550190565b6000620002d4620006348386620005a5565b84620005a5565b6001600160a01b0391909116815260200190565b6001600160a01b0388168152602080820188905260e060408301819052875190830181905260009188810191610100850190845b81811015620006ab5762000698855162000814565b8352938301939183019160010162000683565b50508481036060860152620006c1818a62000560565b9350505050620006d5608083018662000553565b620006e460a0830185620005e1565b620006f360c0830184620005e1565b98975050505050505050565b6020808252818101527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604082015260600190565b602080825260199082015278437265617465323a204661696c6564206f6e206465706c6f7960381b604082015260600190565b60208082526015908201527414d85b1d0818d85b9b9bdd081899481c995d5cd959605a1b604082015260600190565b6020808252601d908201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604082015260600190565b6040518181016001600160401b0381118282101715620007ec57600080fd5b604052919050565b60006001600160401b038211156200080a578081fd5b5060209081020190565b6001600160a01b031690565b6001600160a01b03811681146200083657600080fd5b5056fe61014060405260136101008190527f42616c616e63657220506f6f6c20546f6b656e0000000000000000000000000061012090815262000043916003919062000512565b506040805180820190915260038082526210941560ea1b6020909201918252620000709160049162000512565b506005805460ff191660121790553480156200008b57600080fd5b506040516200346e3803806200346e833981016040819052620000ae91620006ab565b6001600655845160021115620000e15760405162461bcd60e51b8152600401620000d890620009ae565b60405180910390fd5b6040516381158ad960e01b81526000906001600160a01b038916906381158ad99062000115903090600190600401620007da565b602060405180830381600087803b1580156200013057600080fd5b505af115801562000145573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200016b919062000692565b60405163c1be1b6d60e01b81529091506001600160a01b0389169063c1be1b6d90620001a590849088908b908b906000906004016200080b565b600060405180830381600087803b158015620001c057600080fd5b505af1158015620001d5573d6000803e3d6000fd5b505050508551886001600160a01b031663f94d4668836040518263ffffffff1660e01b815260040162000209919062000802565b60006040518083038186803b1580156200022257600080fd5b505afa15801562000237573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000261919081019062000654565b5114620002825760405162461bcd60e51b8152600401620000d8906200094e565b6200028d876200030b565b62000299848862000319565b6001600160601b0319606089901b1660805260a081905267016345785d8a00006001600160801b0383161115620002e45760405162461bcd60e51b8152600401620000d89062000985565b506001600160801b0319608091821b811660e05291901b1660c0525062000a499350505050565b620003168162000329565b50565b620003258282620003b1565b5050565b306000908152602081815260409091205462000350918390620013c4620003be821b17901c565b30600090815260208181526040909120919091556002546200037d918390620013c4620003be821b17901c565b60025560405130906000906000805160206200344e83398151915290620003a690859062000802565b60405180910390a350565b62000325308383620003ef565b600082820183811015620003e65760405162461bcd60e51b8152600401620000d89062000917565b90505b92915050565b604080518082018252601481527f4552525f494e53554646494349454e545f42414c0000000000000000000000006020808301919091526001600160a01b03861660009081528082529290922054620004559290918491620013f0620004e3821b17901c565b6001600160a01b03808516600090815260208181526040808320949094559185168152919091205462000493918390620013c4620003be821b17901c565b6001600160a01b0380841660008181526020819052604090819020939093559151908516906000805160206200344e83398151915290620004d690859062000802565b60405180910390a3505050565b600081848411156200050a5760405162461bcd60e51b8152600401620000d89190620008c1565b505050900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200055557805160ff191683800117855562000585565b8280016001018555821562000585579182015b828111156200058557825182559160200191906001019062000568565b506200059392915062000597565b5090565b5b8082111562000593576000815560010162000598565b8051620003e98162000a1d565b600082601f830112620005cc578081fd5b8151620005e3620005dd82620009fd565b620009d6565b8181529150602080830190848101818402860182018710156200060557600080fd5b60005b84811015620006315781516200061e8162000a1d565b8452928201929082019060010162000608565b505050505092915050565b80516001600160801b0381168114620003e957600080fd5b60006020828403121562000666578081fd5b81516001600160401b038111156200067c578182fd5b6200068a84828501620005bb565b949350505050565b600060208284031215620006a4578081fd5b5051919050565b600080600080600080600060e0888a031215620006c6578283fd5b8751620006d38162000a1d565b60208981015160408b01519299509750906001600160401b0380821115620006f9578586fd5b620007078c838d01620005bb565b975060608b01519150808211156200071d578586fd5b508901601f81018b136200072f578485fd5b805162000740620005dd82620009fd565b81815283810190838501858402850186018f10156200075d578889fd5b8894505b838510156200078c578051620007778162000a33565b83526001949094019391850191850162000761565b508098505050505050620007a48960808a01620005ae565b9250620007b58960a08a016200063c565b9150620007c68960c08a016200063c565b905092959891949750929550565b15159052565b6001600160a01b03831681526040810160028310620007f557fe5b8260208301529392505050565b90815260200190565b600060a08201878352602060018060a01b038089168286015260a0604086015282885180855260c087019150838a019450855b818110156200085e5785518416835294840194918401916001016200083e565b50508581036060870152875180825290830193509050818701845b82811015620008a05781516001600160801b03168552938301939083019060010162000879565b5050505080915050620008b76080830184620007d4565b9695505050505050565b6000602080835283518082850152825b81811015620008ef57858101830151858201604001528201620008d1565b81811115620009015783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526013908201527f4552525f52455045415445445f544f4b454e5300000000000000000000000000604082015260600190565b6020808252600f908201526e4552525f4d41585f4d41585f46454560881b604082015260600190565b6020808252600e908201526d4552525f4d494e5f544f4b454e5360901b604082015260600190565b6040518181016001600160401b0381118282101715620009f557600080fd5b604052919050565b60006001600160401b0382111562000a13578081fd5b5060209081020190565b6001600160a01b03811681146200031657600080fd5b6001600160801b03811681146200031657600080fd5b60805160601c60a05160c05160801c60e05160801c61294462000b0a60003980611303528061142e528061183b5250806103865280610a0952806112b552508061043152806104e252806105c7528061081252806109e55280610b565280610c075280610cec5280610e885280610f39528061101e528061122e52508061040452806104b3528061059a52806107e55280610b295280610bd85280610cbf5280610d805280610e5b5280610f0a5280610ff1528061120152506129446000f3fe608060405234801561001057600080fd5b50600436106100fc5760003560e01c806306fdde0314610101578063095ea7b31461011f578063100f37e71461013f578063127cdc421461015f57806318160ddd1461017457806323b872dd14610189578063313ce5671461019c57806338fff2d0146101b1578063468d7c3b146101b957806366188463146101c157806370a08231146101d457806380afb82a146101e75780638d928af8146101ef57806395d89b4114610204578063a9059cbb1461020c578063b5db9b8b1461021f578063befd70e014610232578063d4cadf6814610245578063d73dd6231461024d578063dd62ed3e14610260575b600080fd5b610109610273565b60405161011691906125a6565b60405180910390f35b61013261012d3660046121ce565b610309565b60405161011691906124e1565b61015261014d36600461231d565b610362565b604051610116919061283d565b61017261016d3660046123f5565b6103b9565b005b61017c6108a3565b60405161011691906124ec565b61013261019736600461218e565b6108a9565b6101a46109da565b6040516101169190612851565b61017c6109e3565b610152610a07565b6101326101cf3660046121ce565b610a2b565b61017c6101e236600461213a565b610af4565b610172610b0f565b6101f7610d7e565b6040516101169190612592565b610109610da2565b61013261021a3660046121ce565b610e03565b61017261022d3660046123f5565b610e19565b61015261024036600461238d565b6112ad565b610152611301565b61013261025b3660046121ce565b611325565b61017c61026e366004612156565b611399565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156102ff5780601f106102d4576101008083540402835291602001916102ff565b820191906000526020600020905b8154815290600101906020018083116102e257829003601f168201915b5050505050905090565b3360008181526001602090815260408083206001600160a01b038716808552925280832085905551919290916000805160206128ef833981519152906103509086906124ec565b60405180910390a35060015b92915050565b60008061037d61037860608801604089016123d9565b61141c565b905060006103ae7f000000000000000000000000000000000000000000000000000000000000000087878786611467565b979650505050505050565b600260065414156103e55760405162461bcd60e51b81526004016103dc906127da565b60405180910390fd5b6002600655604051631f29a8cd60e31b81526060906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f94d466890610459907f0000000000000000000000000000000000000000000000000000000000000000906004016124ec565b60006040518083038186803b15801561047157600080fd5b505afa158015610485573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104ad91908101906121f9565b905060607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fe8f2cb27f0000000000000000000000000000000000000000000000000000000000000000846040518363ffffffff1660e01b815260040161051f929190612546565b60006040518083038186803b15801561053757600080fd5b505afa15801561054b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105739190810190612291565b90506060610580826114c6565b604051631c0d366560e11b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063381a6cca906105f3907f00000000000000000000000000000000000000000000000000000000000000009087908690600401612567565b600060405180830381600087803b15801561060d57600080fd5b505af1158015610621573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106499190810190612291565b915060006106556108a3565b9050600061066b6106668b84611512565b6115b1565b90506001600160801b0381166106935760405162461bcd60e51b81526004016103dc9061262e565b845188146106b35760405162461bcd60e51b81526004016103dc9061269e565b606085516001600160401b03811180156106cc57600080fd5b506040519080825280602002602001820160405280156106f6578160200160208202803683370190505b50905060005b86518110156107cd576107348387838151811061071557fe5b60200260200101516001600160801b03166115da90919063ffffffff16565b82828151811061074057fe5b60200260200101906001600160801b031690816001600160801b0316815250508a8a8281811061076c57fe5b905060200201602081019061078191906123d9565b6001600160801b031682828151811061079657fe5b60200260200101516001600160801b031611156107c55760405162461bcd60e51b81526004016103dc90612739565b6001016106fc565b5060405163c1be1b6d60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c1be1b6d90610843907f00000000000000000000000000000000000000000000000000000000000000009033908b9087908f15906004016124f5565b600060405180830381600087803b15801561085d57600080fd5b505af1158015610871573d6000803e3d6000fd5b5050505061087e8561168e565b6108878b611691565b610891878c61169a565b50506001600655505050505050505050565b60025490565b6000336001600160a01b03851614806108e557506001600160a01b03841660009081526001602090815260408083203384529091529020548211155b6109015760405162461bcd60e51b81526004016103dc9061270a565b61090c8484846116a8565b336001600160a01b0385161480159061094a57506001600160a01b038416600090815260016020908152604080832033845290915290205460001914155b156109d0576001600160a01b038416600090815260016020908152604080832033845290915290205461097d9083611775565b6001600160a01b0385811660009081526001602090815260408083203380855292529182902084905590519186169290916000805160206128ef833981519152916109c7916124ec565b60405180910390a35b5060019392505050565b60055460ff1690565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b3360009081526001602090815260408083206001600160a01b038616845290915281205480831115610a80573360009081526001602090815260408083206001600160a01b0388168452909152812055610aaf565b610a8a8184611775565b3360009081526001602090815260408083206001600160a01b03891684529091529020555b3360008181526001602090815260408083206001600160a01b0389168085529252918290205491519092916000805160206128ef833981519152916109c791906124ec565b6001600160a01b031660009081526020819052604090205490565b604051631f29a8cd60e31b81526060906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f94d466890610b7e907f0000000000000000000000000000000000000000000000000000000000000000906004016124ec565b60006040518083038186803b158015610b9657600080fd5b505afa158015610baa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bd291908101906121f9565b905060607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fe8f2cb27f0000000000000000000000000000000000000000000000000000000000000000846040518363ffffffff1660e01b8152600401610c44929190612546565b60006040518083038186803b158015610c5c57600080fd5b505afa158015610c70573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c989190810190612291565b90506060610ca5826114c6565b604051631c0d366560e11b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063381a6cca90610d18907f00000000000000000000000000000000000000000000000000000000000000009087908690600401612567565b600060405180830381600087803b158015610d3257600080fd5b505af1158015610d46573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d6e9190810190612291565b9150610d798261168e565b505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156102ff5780601f106102d4576101008083540402835291602001916102ff565b6000610e103384846116a8565b50600192915050565b60026006541415610e3c5760405162461bcd60e51b81526004016103dc906127da565b6002600655604051631f29a8cd60e31b81526060906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f94d466890610eb0907f0000000000000000000000000000000000000000000000000000000000000000906004016124ec565b60006040518083038186803b158015610ec857600080fd5b505afa158015610edc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f0491908101906121f9565b905060607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fe8f2cb27f0000000000000000000000000000000000000000000000000000000000000000846040518363ffffffff1660e01b8152600401610f76929190612546565b60006040518083038186803b158015610f8e57600080fd5b505afa158015610fa2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fca9190810190612291565b90506060610fd7826114c6565b604051631c0d366560e11b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063381a6cca9061104a907f00000000000000000000000000000000000000000000000000000000000000009087908690600401612567565b600060405180830381600087803b15801561106457600080fd5b505af1158015611078573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110a09190810190612291565b915060006110ac6108a3565b905060006110bd6106668b84611512565b90506001600160801b0381166110e55760405162461bcd60e51b81526004016103dc9061262e565b845188146111055760405162461bcd60e51b81526004016103dc9061269e565b606085516001600160401b038111801561111e57600080fd5b50604051908082528060200260200182016040528015611148578160200160208202803683370190505b50905060005b86518110156111e9576111678387838151811061071557fe5b82828151811061117357fe5b60200260200101906001600160801b031690816001600160801b0316815250508a8a8281811061119f57fe5b905060200201358282815181106111b257fe5b60200260200101516001600160801b031610156111e15760405162461bcd60e51b81526004016103dc90612811565b60010161114e565b5060405163ad0e595960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ad0e59599061125f907f0000000000000000000000000000000000000000000000000000000000000000908b908b9087908f15906004016124f5565b600060405180830381600087803b15801561127957600080fd5b505af115801561128d573d6000803e3d6000fd5b5050505061129a8561168e565b6112a4338c6117b7565b6108918b6117c1565b6000806112ec7f00000000000000000000000000000000000000000000000000000000000000008686866112e760608c0160408d016123d9565b6117ca565b90506112f781611828565b9695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b3360009081526001602090815260408083206001600160a01b038616845290915281205461135390836113c4565b3360008181526001602090815260408083206001600160a01b038916808552925291829020849055905190926000805160206128ef8339815191529161035091906124ec565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6000828201838110156113e95760405162461bcd60e51b81526004016103dc906125f9565b9392505050565b600081848411156114145760405162461bcd60e51b81526004016103dc91906125a6565b505050900390565b6000806114526001600160801b0384167f00000000000000000000000000000000000000000000000000000000000000006115da565b90506113e96001600160801b0384168261186f565b6000611471612025565b61147e87878787876118a0565b905060008387868151811061148f57fe5b60200260200101510390506114a482826119f9565b8786815181106114b057fe5b6020026020010151039250505095945050505050565b60608082516001600160401b03811180156114e057600080fd5b5060405190808252806020026020018201604052801561150a578160200160208202803683370190505b509392505050565b6000816115315760405162461bcd60e51b81526004016103dc90612789565b670de0b6b3a764000083028315806115595750670de0b6b3a764000084828161155657fe5b04145b6115755760405162461bcd60e51b81526004016103dc906126e0565b6002830481018181101561159b5760405162461bcd60e51b81526004016103dc906126e0565b60008482816115a657fe5b049695505050505050565b6000600160801b82106115d65760405162461bcd60e51b81526004016103dc90612657565b5090565b60008282026001600160801b03841615806116215750826001600160801b0316846001600160801b0316826001600160801b03168161161557fe5b046001600160801b0316145b61163d5760405162461bcd60e51b81526004016103dc9061275f565b6706f05b59d3b2000081016001600160801b0380831690821610156116745760405162461bcd60e51b81526004016103dc9061275f565b6000670de0b6b3a76400006001600160801b0383166115a6565b50565b61168e81611b11565b6116a48282611b79565b5050565b604080518082018252601481527311549497d25394d551919250d251539517d0905360621b6020808301919091526001600160a01b03861660009081529081905291909120546116f99183906113f0565b6001600160a01b03808516600090815260208190526040808220939093559084168152205461172890826113c4565b6001600160a01b0380841660008181526020819052604090819020939093559151908516906000805160206128cf833981519152906117689085906124ec565b60405180910390a3505050565b60006113e983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506113f0565b6116a48282611b84565b61168e81611b8f565b60006117d4612025565b6117e18787878787611c1a565b90506000838787815181106117f257fe5b602002602001015101905086868151811061180957fe5b602002602001015161181b83836119f9565b0398975050505050505050565b600061035c61185f670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000061186f565b6001600160801b03841690611d32565b600080600061187e8585611e1e565b91509150801561150a5760405162461bcd60e51b81526004016103dc906127af565b6118a8612025565b60006118b48787611e55565b8651909150600090670de0b6b3a7640000906001835b828110156119b8578881146119ac578981141561194f57876001600160801b03168b82815181106118f757fe5b60200260200101516001600160801b03168601019450670de0b6b3a76400006001600160801b0316888c838151811061192c57fe5b6020026020010151016001600160801b031685028161194757fe5b0593506119ac565b8a818151811061195b57fe5b60200260200101516001600160801b031685019450670de0b6b3a76400006001600160801b03168b828151811061198e57fe5b60200260200101516001600160801b03168502816119a857fe5b0593505b908202906001016118ca565b506040805160c0810182526001600160801b039c909c168c5260208c0195909552938a01526060890192909252608088015260a08701525093949350505050565b60208201518251606084015160009283928392670de0b6b3a764000081611a1c57fe5b050302856080015186600001510201905060008560a00151866060015187606001510202866020015187602001518860200151020281611a5857fe5b05905060005b60ff811215611b06578651670de0b6b3a764000083026001600160801b0388169182028083029286029290920103906002028401808281611a9b57fe5b056001600160801b03808a16918203975087161115611ad857655af3107a40008887036001600160801b031613611ad3575050611b06565b611af7565b655af3107a40008887036001600160801b031613611af7575050611b06565b50939550859350600101611a5e565b509195945050505050565b30600090815260208190526040902054611b2b90826113c4565b30600090815260208190526040902055600254611b4890826113c4565b60025560405130906000906000805160206128cf83398151915290611b6e9085906124ec565b60405180910390a350565b6116a43083836116a8565b6116a48230836116a8565b604080518082018252601481527311549497d25394d551919250d251539517d0905360621b602080830191909152306000908152908190529190912054611bd79183906113f0565b30600090815260208190526040902055600254611bf49082611775565b60025560405160009030906000805160206128cf83398151915290611b6e9085906124ec565b611c22612025565b6000611c2e8787611e55565b8651909150600090670de0b6b3a7640000906001835b828110156119b857898114611d265788811415611cc957876001600160801b03168b8281518110611c7157fe5b60200260200101516001600160801b03168601039450670de0b6b3a76400006001600160801b0316888c8381518110611ca657fe5b6020026020010151036001600160801b0316850281611cc157fe5b059350611d26565b8a8181518110611cd557fe5b60200260200101516001600160801b031685019450670de0b6b3a76400006001600160801b03168b8281518110611d0857fe5b60200260200101516001600160801b0316850281611d2257fe5b0593505b90820290600101611c44565b60006001600160801b038216611d5a5760405162461bcd60e51b81526004016103dc90612789565b670de0b6b3a764000083026001600160801b0384161580611da05750670de0b6b3a76400006001600160801b0385811690831681611d9457fe5b046001600160801b0316145b611dbc5760405162461bcd60e51b81526004016103dc906126e0565b600060026001600160801b0385160482019050816001600160801b0316816001600160801b03161015611e015760405162461bcd60e51b81526004016103dc906126e0565b6000846001600160801b0316826001600160801b0316816115a657fe5b600080826001600160801b0316846001600160801b031610611e465750508082036000611e4e565b505081810360015b9250929050565b80516000906001600160801b038416908290670de0b6b3a7640000906001835b82811015611ee557878181518110611e8957fe5b60200260200101516001600160801b031685019450670de0b6b3a76400006001600160801b0316888281518110611ebc57fe5b60200260200101516001600160801b0316850281611ed657fe5b05935090820290600101611e75565b508360008083670de0b6b3a764000081611efb57fe5b0588039050838002860260005b60ff811215612014576000670de0b6b3a76400008b8b02878581800281611f2b57fe5b0502888702010381611f3957fe5b0590506000670de0b6b3a7640000878581830281611f5357fe5b0560030202670de0b6b3a76400006001600160801b031687020181611f7457fe5b05905083670de0b6b3a7640000880281611f8a57fe5b828002600202919005830260060201671bc16d674ec800008284020281611fad57fe5b058703955086861315611fe257655af3107a400087870313611fdd57859c5050505050505050505050505061035c565b612005565b655af3107a40008688031361200557859c5050505050505050505050505061035c565b50939450849350600101611f08565b50919b9a5050505050505050505050565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008083601f84011261206c578081fd5b5081356001600160401b03811115612082578182fd5b6020830191508360208083028501011115611e4e57600080fd5b600082601f8301126120ac578081fd5b81356120bf6120ba82612885565b61285f565b8181529150602080830190848101818402860182018710156120e057600080fd5b60005b848110156121085781356120f6816128b9565b845292820192908201906001016120e3565b505050505092915050565b8035801515811461035c57600080fd5b600060e08284031215612134578081fd5b50919050565b60006020828403121561214b578081fd5b81356113e9816128a4565b60008060408385031215612168578081fd5b8235612173816128a4565b91506020830135612183816128a4565b809150509250929050565b6000806000606084860312156121a2578081fd5b83356121ad816128a4565b925060208401356121bd816128a4565b929592945050506040919091013590565b600080604083850312156121e0578182fd5b82356121eb816128a4565b946020939093013593505050565b6000602080838503121561220b578182fd5b82516001600160401b03811115612220578283fd5b8301601f81018513612230578283fd5b805161223e6120ba82612885565b818152838101908385018584028501860189101561225a578687fd5b8694505b83851015612285578051612271816128a4565b83526001949094019391850191850161225e565b50979650505050505050565b600060208083850312156122a3578182fd5b82516001600160401b038111156122b8578283fd5b8301601f810185136122c8578283fd5b80516122d66120ba82612885565b81815283810190838501858402850186018910156122f2578687fd5b8694505b83851015612285578051612309816128b9565b8352600194909401939185019185016122f6565b60008060008060808587031215612332578081fd5b84356001600160401b0380821115612348578283fd5b61235488838901612123565b95506020870135915080821115612369578283fd5b506123768782880161209c565b949794965050505060408301359260600135919050565b600080600080608085870312156123a2578384fd5b84356001600160401b03808211156123b8578586fd5b6123c488838901612123565b95506020870135915080821115612369578485fd5b6000602082840312156123ea578081fd5b81356113e9816128b9565b60008060008060006080868803121561240c578283fd5b8535945060208601356001600160401b03811115612428578384fd5b6124348882890161205b565b909550935061244890508760408801612113565b91506060860135612458816128a4565b809150509295509295909350565b6000815180845260208085019450808401835b8381101561249e5781516001600160a01b031687529582019590820190600101612479565b509495945050505050565b6000815180845260208085019450808401835b8381101561249e5781516001600160801b0316875295820195908201906001016124bc565b901515815260200190565b90815260200190565b8581526001600160a01b038516602082015260a06040820181905260009061251f90830186612466565b828103606084015261253181866124a9565b91505082151560808301529695505050505050565b60008382526040602083015261255f6040830184612466565b949350505050565b6000848252606060208301526125806060830185612466565b82810360408401526112f781856124a9565b6001600160a01b0391909116815260200190565b6000602080835283518082850152825b818110156125d2578581018301518582016040015282016125b6565b818111156125e35783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601b908201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604082015260600190565b6020808252600f908201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604082015260600190565b60208082526027908201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316040820152663238206269747360c81b606082015260800190565b60208082526022908201527f546f6b656e7320616e6420616d6f756e7473206c656e677468206d69736d61746040820152610c6d60f31b606082015260800190565b60208082526010908201526f11549497d1125597d25395115493905360821b604082015260600190565b60208082526015908201527422a9292fa12a27a5a2a72fa120a22fa1a0a62622a960591b604082015260600190565b6020808252600c908201526b22a9292fa624a6a4aa2fa4a760a11b604082015260600190565b60208082526010908201526f4552525f4d554c5f4f564552464c4f5760801b604082015260600190565b6020808252600c908201526b4552525f4449565f5a45524f60a01b604082015260600190565b6020808252601190820152704552525f5355425f554e444552464c4f5760781b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526012908201527109c9ea8408ab092a8929c8e408a9c9eaa8e960731b604082015260600190565b6001600160801b0391909116815260200190565b60ff91909116815260200190565b6040518181016001600160401b038111828210171561287d57600080fd5b604052919050565b60006001600160401b0382111561289a578081fd5b5060209081020190565b6001600160a01b038116811461168e57600080fd5b6001600160801b038116811461168e57600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a264697066735822122089572503f289f58e34e573e20c3a89e43bd3acd36d87e49e0f9bbe8c7ce077ec64736f6c63430007010033ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220fa2af2f3c40b5de62a6ab5cacc93c4e5d04d99349382fa99a0b42613bf6b12cc64736f6c63430007010033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}